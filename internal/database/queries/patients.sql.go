// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patients.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountPatients = `-- name: CountPatients :one
SELECT COUNT(*) FROM patients
`

func (q *Queries) CountPatients(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountPatients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePatient = `-- name: CreatePatient :one
INSERT INTO patients (
    first_name, last_name, email, phone, date_of_birth,
    gender, address, medical_history, allergies,
    emergency_contact_name, emergency_contact_phone, created_by
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, first_name, last_name, email, phone, date_of_birth, gender,
          address, medical_history, allergies, emergency_contact_name,
          emergency_contact_phone, created_by, created_at, updated_at
`

type CreatePatientParams struct {
	FirstName             string      `db:"first_name" json:"first_name"`
	LastName              string      `db:"last_name" json:"last_name"`
	Email                 *string     `db:"email" json:"email"`
	Phone                 *string     `db:"phone" json:"phone"`
	DateOfBirth           pgtype.Date `db:"date_of_birth" json:"date_of_birth"`
	Gender                *string     `db:"gender" json:"gender"`
	Address               *string     `db:"address" json:"address"`
	MedicalHistory        *string     `db:"medical_history" json:"medical_history"`
	Allergies             *string     `db:"allergies" json:"allergies"`
	EmergencyContactName  *string     `db:"emergency_contact_name" json:"emergency_contact_name"`
	EmergencyContactPhone *string     `db:"emergency_contact_phone" json:"emergency_contact_phone"`
	CreatedBy             *int32      `db:"created_by" json:"created_by"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (*Patient, error) {
	row := q.db.QueryRow(ctx, CreatePatient,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.DateOfBirth,
		arg.Gender,
		arg.Address,
		arg.MedicalHistory,
		arg.Allergies,
		arg.EmergencyContactName,
		arg.EmergencyContactPhone,
		arg.CreatedBy,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.MedicalHistory,
		&i.Allergies,
		&i.EmergencyContactName,
		&i.EmergencyContactPhone,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeletePatient, id)
	return err
}

const GetPatientByID = `-- name: GetPatientByID :one
SELECT id, first_name, last_name, email, phone, date_of_birth, gender,
       address, medical_history, allergies, emergency_contact_name,
       emergency_contact_phone, created_by, created_at, updated_at
FROM patients
WHERE id = $1
`

func (q *Queries) GetPatientByID(ctx context.Context, id int32) (*Patient, error) {
	row := q.db.QueryRow(ctx, GetPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.MedicalHistory,
		&i.Allergies,
		&i.EmergencyContactName,
		&i.EmergencyContactPhone,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetPatients = `-- name: GetPatients :many
SELECT id, first_name, last_name, email, phone, date_of_birth, gender,
       address, medical_history, allergies, emergency_contact_name,
       emergency_contact_phone, created_by, created_at, updated_at
FROM patients
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPatientsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetPatients(ctx context.Context, arg GetPatientsParams) ([]*Patient, error) {
	rows, err := q.db.Query(ctx, GetPatients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.DateOfBirth,
			&i.Gender,
			&i.Address,
			&i.MedicalHistory,
			&i.Allergies,
			&i.EmergencyContactName,
			&i.EmergencyContactPhone,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchPatients = `-- name: SearchPatients :many
SELECT id, first_name, last_name, email, phone, date_of_birth, gender,
       address, medical_history, allergies, emergency_contact_name,
       emergency_contact_phone, created_by, created_at, updated_at
FROM patients
WHERE
    LOWER(first_name) LIKE LOWER('%' || $1 || '%') OR
    LOWER(last_name) LIKE LOWER('%' || $1 || '%') OR
    LOWER(email) LIKE LOWER('%' || $1 || '%') OR
    phone LIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchPatientsParams struct {
	Column1 *string `db:"column_1" json:"column_1"`
	Limit   int32   `db:"limit" json:"limit"`
	Offset  int32   `db:"offset" json:"offset"`
}

func (q *Queries) SearchPatients(ctx context.Context, arg SearchPatientsParams) ([]*Patient, error) {
	rows, err := q.db.Query(ctx, SearchPatients, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.DateOfBirth,
			&i.Gender,
			&i.Address,
			&i.MedicalHistory,
			&i.Allergies,
			&i.EmergencyContactName,
			&i.EmergencyContactPhone,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    email = COALESCE($4, email),
    phone = COALESCE($5, phone),
    date_of_birth = COALESCE($6, date_of_birth),
    gender = COALESCE($7, gender),
    address = COALESCE($8, address),
    medical_history = COALESCE($9, medical_history),
    allergies = COALESCE($10, allergies),
    emergency_contact_name = COALESCE($11, emergency_contact_name),
    emergency_contact_phone = COALESCE($12, emergency_contact_phone),
    updated_at = NOW()
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, date_of_birth, gender,
          address, medical_history, allergies, emergency_contact_name,
          emergency_contact_phone, created_by, created_at, updated_at
`

type UpdatePatientParams struct {
	ID                    int32       `db:"id" json:"id"`
	FirstName             *string     `db:"first_name" json:"first_name"`
	LastName              *string     `db:"last_name" json:"last_name"`
	Email                 *string     `db:"email" json:"email"`
	Phone                 *string     `db:"phone" json:"phone"`
	DateOfBirth           pgtype.Date `db:"date_of_birth" json:"date_of_birth"`
	Gender                *string     `db:"gender" json:"gender"`
	Address               *string     `db:"address" json:"address"`
	MedicalHistory        *string     `db:"medical_history" json:"medical_history"`
	Allergies             *string     `db:"allergies" json:"allergies"`
	EmergencyContactName  *string     `db:"emergency_contact_name" json:"emergency_contact_name"`
	EmergencyContactPhone *string     `db:"emergency_contact_phone" json:"emergency_contact_phone"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (*Patient, error) {
	row := q.db.QueryRow(ctx, UpdatePatient,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.DateOfBirth,
		arg.Gender,
		arg.Address,
		arg.MedicalHistory,
		arg.Allergies,
		arg.EmergencyContactName,
		arg.EmergencyContactPhone,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.MedicalHistory,
		&i.Allergies,
		&i.EmergencyContactName,
		&i.EmergencyContactPhone,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
