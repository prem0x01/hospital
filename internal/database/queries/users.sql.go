// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, role, first_name, last_name)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password_hash, role, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	Email        string `db:"email" json:"email"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	Role         string `db:"role" json:"role"`
	FirstName    string `db:"first_name" json:"first_name"`
	LastName     string `db:"last_name" json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const GetDoctors = `-- name: GetDoctors :many
SELECT id, email, role, first_name, last_name, created_at, updated_at
FROM users
WHERE role = 'doctor'
ORDER BY first_name, last_name
`

type GetDoctorsRow struct {
	ID        int32            `db:"id" json:"id"`
	Email     string           `db:"email" json:"email"`
	Role      string           `db:"role" json:"role"`
	FirstName string           `db:"first_name" json:"first_name"`
	LastName  string           `db:"last_name" json:"last_name"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetDoctors(ctx context.Context) ([]*GetDoctorsRow, error) {
	rows, err := q.db.Query(ctx, GetDoctors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDoctorsRow
	for rows.Next() {
		var i GetDoctorsRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, role, first_name, last_name, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, role, first_name, last_name, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($2, email),
    password_hash = COALESCE($3, password_hash),
    role = COALESCE($4, role),
    first_name = COALESCE($5, first_name),
    last_name = COALESCE($6, last_name),
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, role, first_name, last_name, created_at, updated_at
`

type UpdateUserParams struct {
	ID           int32   `db:"id" json:"id"`
	Email        *string `db:"email" json:"email"`
	PasswordHash *string `db:"password_hash" json:"password_hash"`
	Role         *string `db:"role" json:"role"`
	FirstName    *string `db:"first_name" json:"first_name"`
	LastName     *string `db:"last_name" json:"last_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
